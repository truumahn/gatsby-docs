$font-path: '../fonts';

// The font stack used by the theme.
//
// Structure:
//
// FontName: map
//   dirPath: string
//   fallback: string
//   variants: map
//     VariantName: list
//       font-weight: integer
//       font-style: property value
//       (optional) font-stretch: property value
//
// Font file names must have the exact FontName-VariantName.* structure to work.
//
// Examples:
// - JosefinSans-Regular.woff
// - Avenir-BlackOblique.woff
$fontStack: (
  'SourceSansPro': (
    'fallback': (
      Helvetica,
      Arial,
      sans-serif,
    ),
    'dirPath': '#{$font-path}/sourcesanspro',
    'variants': (
      'ExtraLight': (
        'weight': 200,
        'style': normal,
      ),
      'ExtraLightItalic': (
        'weight': 200,
        'style': italic,
      ),
      'Light': (
        'weight': 300,
        'style': normal,
      ),
      'LightItalic': (
        'weight': 300,
        'style': italic,
      ),
      'Regular': (
        'weight': 400,
        'style': normal,
      ),
      'Italic': (
        'weight': 400,
        'style': italic,
      ),
      'Semibold': (
        'weight': 600,
        'style': normal,
      ),
      'SemiboldItalic': (
        'weight': 600,
        'style': italic,
      ),
      'Bold': (
        'weight': 700,
        'style': normal,
      ),
      'BoldItalic': (
        'weight': 700,
        'style': italic,
      ),
      'Black': (
        'weight': 900,
        'style': normal,
      ),
      'BlackItalic': (
        'weight': 900,
        'style': italic,
      ),
    ),
  ),
) !default;

// Set the font based on the $fontStack map.
//
// string $fontFamily
//   The name of a font family that exists in the stack.
// string $fontPath
//   The name of the variant of a font family.
// property $fontWeight
//   CSS Font Weight property.
// property $fontStyle
//   CSS Font Style property.
// property $fontStretch
//   CSS Font Stretch property..
@mixin declareFontFace($fontFamily, $fontPath, $fontWeight: normal, $fontStyle: normal, $fontStretch: normal) {
  @font-face {
    font-family: $fontFamily;
    src: url('#{$fontPath}.woff2') format('woff2'), url('#{$fontPath}.woff') format('woff');
    font-weight: $fontWeight;
    font-style: $fontStyle;
    font-stretch: $fontStretch;
  }
}

// Generate font faces from the given stack.
//
// map $fontStack
//   An optional alternative fontStack map if there is no default defined.
@mixin generateFontFacesFromStack($fontStack: $fontStack) {
  @each $fontFamily, $fontFamilyProps in $fontStack {
    @each $fontVariant, $fontVariantProps in map-get($fontFamilyProps, variants) {
      @if not $fontVariant {
        @debug 'faken';
      }
      $props: (
        '#{$fontFamily}',
        '#{map-get($fontFamilyProps, dirPath)}/#{$fontFamily}-#{$fontVariant}',
        map-get($fontVariantProps, weight),
        map-get($fontVariantProps, style)
      );
      @if map-has-key($fontVariantProps, stretch) {
        $props: append(map-get($fontVariantProps, stretch));
      }
      @include declareFontFace($props...);
    }
  }
}

// Set the font based on the $fontStack map.
//
// string $fontFamily
//   The name of a font family that exists in the stack.
// string $variant
//   The name of the variant of a font family.
// map $fontStack
//   An optional alternative fontStack map if there is no default defined.
@mixin setFontFromStack($fontFamily, $variant, $fontStack: $fontStack) {
  @if map-has_key($fontStack, $fontFamily) {
    $font: map-get($fontStack, $fontFamily);
    $fontVariants: map-get($font, variants);
    @if map-has-key($fontVariants, $variant) {
      $fontVariant: map-get($fontVariants, $variant);
      @if map-has_key($font, fallback) {
        $fontFamily: append($fontFamily, map-get($font, fallback), $separator: comma);
      }
      font-family: $fontFamily;
      font-weight: map-get($fontVariant, weight);
      font-style: map-get($fontVariant, style);
      @if map-has-key($fontVariant, stretch) {
        font-stretch: map-get($fontVariant, stretch);
      }
    }
  }
}

@include generateFontFacesFromStack;
